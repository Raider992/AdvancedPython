# Рекурсия
from Tools.i18n.makelocalealias import pprint


# Задание 1
#
# Дано натуральное число N. Вычислите сумму его цифр.
# При решении этой задачи нельзя использовать строки,
# списки, массивы (ну и циклы, разумеется).
#
# Ввод
# 179
# Вывод
# 17
#
# def rec1(n, inc=0):
#
#     if n // 10 == 0:
#         inc += n
#         return inc
#
#     return rec1(n // 10, inc + n % 10)
#
# print(rec1(179))


# Задание 2

# Найдите N-е число последовательности Фибоначчи

# def fib_rec(n):
#     if n <= 1:
#         return n
#
#     return fib_rec(n-2) + fib_rec(n - 1)
#
# print(fib_rec(5))

# Задание 3

# Дано натуральное число N и
# последовательность из N элементов.
# Требуется вывести эту последовательность в
# обратном порядке.
# Примечание. В программе запрещается
# объявлять массивы и использовать циклы
# (даже для ввода и вывода).
# Input: 2 -> 3 4
# Output: 4 3

def rec_reverse(st, res=''):
    if len(st) == 0:
        return res

    return rec_reverse(st[:-1], res + st[-1])


print(rec_reverse( '12345'))

# # Задание 4
#
# # Выведите строку по частям
# #
# # Hello
# # Hell
# # Hel
# # He
# # H
#
# def rec_curve(data:str):
#     if len(data) > 0:
#         print(data)
#         return rec_curve(data[:-1])
#     return ''
#
# print(rec_curve('hello'))
#
#
# # Задание 5
#
# # Цифры числа слева направо
# # Дано натуральное число N. Выведите все его цифры по одной, в обычном порядке,
# # разделяя их пробелами или новыми строками.
# #
# # При решении этой задачи нельзя использовать строки, списки,
# # массивы (ну и циклы, разумеется). Разрешена только
# # рекурсия и целочисленная арифметика.
#
# def digits(n):
#     if n // 10 == 0:
#         return print(n, end=' ')
#
#     print(n%10, end=' ')
#     return digits(n // 10)
#
# digits(12345)

# def func(n, res=''):
#     if n == 0:
#         return res
#
#     return func(n // 10, res + str(n % 10))
#
# print(func(12345))

# # Домашнее задание 1
#
# # Напишите рекурсивную функцию sum(a, b),
# # возвращающую сумму двух целых неотрицательных чисел.
# # Из всех арифметических операций допускаются только +1 и -1.
# # Также нельзя использовать циклы.
# #
# # Функция не должна ничего выводить, только возвращать значение.
#
# def summ(a,b):
#     if b == 0:
#         return a
#
#     return summ(a+1,b-1)
#
# print(summ(5,3))
#
#
# # Домашнее задание 2
#
# # Напишите функцию f, которая на вход принимает два числа a и b,
# # и возводит число a в целую степень b с помощью рекурсии.
# #
# # Функция не должна ничего выводить, только возвращать значение.
#
# def power(a, b):
#     if b == 0:
#         return 1
#     elif b == 1:
#         return a
#
#     return a * power(a, b - 1)
#
#
# print(power(2, 3))
#
# # Итого: не получилось реализовать практику-5, вышло только в обратном порядке. Практика-3 под вопросом


# Задание 2.
#
# Последовательностью Фибоначчи называется
# последовательность чисел a0
# , a1
# , ..., an
# , ..., где
# a0 = 0, a1 = 1,
# ak = ak-1 + ak-2 (k > 1).

# Требуется найти N-е число Фибоначчи
# Input: 7
# Output: 21
# """
# # 0, 1, 1, 2, 3, 5, 8, 13, 21


# Задача 2(альт):

# a = 7
# fibo_p, fibo_n = 0, 1
# for _ in range(0, a):
#     fibo_p, fibo_n = fibo_n, fibo_p + fibo_n
# print(f'{a}-e число = {fibo_n}')
#
# def rec_fib(a, fibo_p=0, fibo_n=1):
#     if a == 0:
#         return fibo_n
#
#     return rec_fib(a - 1, fibo_n, fibo_p + fibo_n)
#
# print(rec_fib(7))